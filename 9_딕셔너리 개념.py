# 딕셔너리 개념

# 사람 2명 만들어서 자기소개하기 

# 한사람의 정보는 고향, 나이, 이름 3개로 이루어져있다.

# 대전, 20살, 홍길동
# 서울, 21살, 홍길순

# 자기소개 함수 작성
def introduce(person) : # person에는 한 사람의 정보 3개가 저장되어 있다.
  print('안녕하세요. 저는 {} 사는 {}살 {}입니다. 반갑습니다.'.format(person[0], person[1], person[2]))  


# 홍길동 정보
home = "대전"
age = 20
name = "홍길동"

# 홍길동의 정보를 리스트로 묶어서
hong = [home, age, name]


# 함수에 한번에 보내면 데이터가 흩어지지 않고 안전하며 데이터 다루기도 수월해진다.

introduce(hong)
# 안녕하세요. 저는 대전 사는 20살 홍길동입니다. 반갑습니다.
introduce(hong)


# 홍길순의 정보
home2 = "서울"
age2 = 21
name2 = "홍길순"

# 마찬가지로 홍길순의 정보도 리스트로 묶어서 
hong2 = [home2, age2, name2]

# 함수로 보낸다.
introduce(hong2)
# 안녕하세요. 저는 서울 사는 21살 홍길순입니다. 반갑습니다.
introduce(hong2)

# 리스트로 묶어서 데이터를 좀 더 안전하게 다루었지만 리스트 아쉬운 점이 있다.
# 데이터를 순서만으로 다루기 때문에 데이터의 의미를 파악하기 쉽지 않다.
# 리스트는 아주 많은 데이터를 일괄처리하기는 좋으나 데이터를 디테일하게 다루기는 아쉽다.

# 아래처럼 데이터의 의미를 명확히 해서 관리하고 싶다.
# print(hong["나이"]) # 20
# print(hong["이름"]) # 홍길동
# print(hong["고향"]) # 대전



# 그러기 위해 파이썬에서는 딕셔너리(사전)라는 저장형태를 제공한다.
# 딕셔너리는 데이터를 사람이 알아보기 쉬운 데이터로 매핑해서 사전처럼 저장할 수 있다. 
# 때문에 데이터를 의미 있게 다루기 용이하여 유사한 데이터군을 묶어서 하나의 개념처럼 사용할 때 많이 사용한다.
# 단, 순서가 없기 때문에 일괄처리에 조금 취약

# 딕셔너리는 []를 이용해 만드는 리스트와는 달리 아래와 같이 {}를 이용해 만든다.
dic1 = {"고향" : "대전", "나이" : 20, "이름" : "홍길동"}
dic2 = {"고향" : "서울", "나이" : 21, "이름" : "홍길순"}

# 데이터를 이름붙여서 가져올 수 있다.
# 여기서 데이터를 value라고 부르고 value를 찾기위해 붙인 이름을 key라고 부른다.
print(dic1["이름"])
print(dic1["나이"])
print(dic1["고향"])

print(dic2["이름"])
print(dic2["나이"])
print(dic2["고향"])

# 추가, 수정, 삭제, 조회 (교재 section2 - 04)
# 비어있는 딕셔너리 생성
dic1 = {}
print(dic1)

# ==============================================================================
# 딕셔너리 추가, 수정
# ==============================================================================
dic1["이름"] = "홍길동" # 이름이라는 key가 없으면 추가, 이미 존재하면 아래처럼 수정
dic1["나이"] = 22

print(dic1)

# 수정
dic1["이름"] = "홍길순"
print(dic1)


# ==============================================================================
# 삭제 - 리스트와 마찬가지로 del 이용
# ==============================================================================
del(dic1["나이"])
print(dic1)

# ==============================================================================
# 조회 - 리스트처럼 [] 안에 key를 넣어서 조회
# ==============================================================================
print(dic1["이름"])
