# 리스트 예시
# 리스트를 이용한 학생 성적 정보 예시

# 철수, 영희, 민주, 선빈, 동구. 총원 5명인 학급.
# 철수 86점, 영희 93점, 민주 100점, 선빈 73점, 동구 55점,  짱구 70

# 수열 만들수 있기 때문에 데이터를 순서로 다루게 되면 굉장히 편리해짐

# 학생들의 점수 총점


 

철수 = 86
영희 = 93
민주 = 100
선빈 = 73
동구 = 55

A반 = [86, 93, 100, 73, 55]

print(철수)
print(영희)
print(민주)
print(선빈)
print(동구)


a = 0
while a <= 4:
  print(A반[a])
  a += 1


# A반 = [철수, 영희, 민주, 선빈, 동구]

# s = 철수 + 영희 + 민주 + 선빈 + 동구 + 짱구
# s = A반[0] + A반[1] + A반[2] + A반[3] + A반[4]
# print(s)
# 합구하기

total_score = 0

b = 0
while b <= 4:
  total_score += A반[b]
  b += 1 

print(total_score)

# 학생들의 평균
avg = total_score / 5
print(avg)

# # 평균 이상의 학생의 점수만 출력

# if A반[0] >= avg :
#   print(A반[0])

# if A반[1] >= avg :
#   print(A반[1])

# if A반[2] >= avg :
#   print(A반[2])

# if A반[3] >= avg :
#   print(A반[3])  

# if A반[4] >= avg :
#   print(A반[4])


c = 0

while c <= 4:

  if A반[c] >= avg :
    print(A반[c])
  c += 1

# 평균 이하의 학생의 점수만 출력

c = 0

while c <= 4:

  if A반[c] <= avg :
    print(A반[c])
  c += 1


# 데이터가 많아지면 데이터를 저장하는 변수 많아진다.
# 변수가 많으면 관리가 힘들다. 코드길어지고 변수을 일일히 기억.
# 리스트를 사용하여 데이터에 순서를 부여 -> 변수명 X
# 반복문을 이용해서 수열을 만들수 있기 때문에 리스트를 일괄적으로 사용 가능
# 변수가 줄어들고. 많은 데이터를 일괄처리할 수 있다.
